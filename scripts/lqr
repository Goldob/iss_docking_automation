#!/usr/bin/env python

import rospy

from std_msgs.msg import Float64

import numpy as np

from control import lqr
from iss_docking_automation import StateBuffer

UPDATE_RATE = 20

if __name__ == '__main__':
    rospy.init_node('lqr')
    state_buffer = StateBuffer()
    setpoint_buffer = StateBuffer()

    timestep = 1. / UPDATE_RATE

    state_namespace         = rospy.get_param('~state_namespace')
    setpoint_namespace      = rospy.get_param('~setpoint_namespace')
    control_value_namespace = rospy.get_param('~control_value_namespace')

    deviation_cost = rospy.get_param('~deviation_cost', 1.0)
    actuation_cost = rospy.get_param('~actuation_cost')

    # Dynamics matrix
    A = np.identity(6)

    # Input matrix
    B = np.identity(6) * timestep

    # State weight matrix
    Q = np.identity(6) * deviation_cost

    # Actuation weight matrix
    R = np.identity(6) * actuation_cost

    # State feedback gains
    K, _, _ = lqr(A, B, Q, R)

    ############################################################################
    # State subscribers: translation
    ############################################################################

    rospy.Subscriber(state_namespace + '/x',
        Float64, state_buffer.handle_x)
    rospy.Subscriber(state_namespace + '/y',
        Float64, state_buffer.handle_y)
    rospy.Subscriber(state_namespace + '/z',
        Float64, state_buffer.handle_z)

    ############################################################################
    # State subscribers: rotation
    ############################################################################

    rospy.Subscriber(state_namespace + '/yaw',
        Float64, state_buffer.handle_yaw)
    rospy.Subscriber(state_namespace + '/pitch',
        Float64, state_buffer.handle_pitch)
    rospy.Subscriber(state_namespace + '/roll',
        Float64, state_buffer.handle_roll)

    ############################################################################
    # Setpoint subscribers: translation
    ############################################################################

    rospy.Subscriber(setpoint_namespace + '/x', Float64,
        setpoint_buffer.handle_x)
    rospy.Subscriber(setpoint_namespace + '/y', Float64,
        setpoint_buffer.handle_y)
    rospy.Subscriber(setpoint_namespace + '/z',
        Float64, setpoint_buffer.handle_z)

    ############################################################################
    # Setpoint subscribers: rotation
    ############################################################################

    rospy.Subscriber(setpoint_namespace + '/yaw',
        Float64, setpoint_buffer.handle_yaw)
    rospy.Subscriber(setpoint_namespace + '/pitch',
        Float64, setpoint_buffer.handle_pitch)
    rospy.Subscriber(setpoint_namespace + '/roll' ,
        Float64, setpoint_buffer.handle_roll)

    ############################################################################
    # Control Value publishers: translation
    ############################################################################

    cv_x_pub = rospy.Publisher(control_value_namespace + '/x',
        Float64, queue_size=1)
    cv_y_pub = rospy.Publisher(control_value_namespace + '/y',
        Float64, queue_size=1)
    cv_z_pub = rospy.Publisher(control_value_namespace + '/z',
        Float64, queue_size=1)

    ############################################################################
    # Control Value publishers: rotation
    ############################################################################

    cv_yaw_pub   = rospy.Publisher(control_value_namespace + '/yaw',
        Float64, queue_size=1)
    cv_pitch_pub = rospy.Publisher(control_value_namespace + '/pitch',
        Float64, queue_size=1)
    cv_roll_pub  = rospy.Publisher(control_value_namespace + '/roll',
        Float64, queue_size=1)


    rate = rospy.Rate(20)
    while not rospy.is_shutdown():
        if not state_buffer.is_initialized():
            rate.sleep()
            continue
        if not setpoint_buffer.is_initialized():
            rate.sleep()
            continue

        state = state_buffer.get_state()
        setpoint = setpoint_buffer.get_state()

        x = np.array([[
            state['x']     - setpoint['x'],
            state['y']     - setpoint['y'],
            state['z']     - setpoint['z'],
            state['yaw']   - setpoint['yaw'],
            state['pitch'] - setpoint['pitch'],
            state['roll']  - setpoint['roll']
        ]]).T

        cv = - np.array(K * x)[:,0]

        # Control Values: translation

        cv_x_pub.publish(cv[0])
        cv_y_pub.publish(cv[1])
        cv_z_pub.publish(cv[2])

        # Control Values: rotation

        cv_yaw_pub.publish(cv[0])
        cv_pitch_pub.publish(cv[1])
        cv_roll_pub.publish(cv[2])

        rate.sleep()
