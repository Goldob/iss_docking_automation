#!/usr/bin/env python

import rospy
from std_srvs.srv import Empty, EmptyResponse
from std_msgs.msg import Float64, Bool

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import time
import numpy as np

START_DELAY = 5.0

class Simulator():
    def __init__(self):
        self._driver = webdriver.Firefox()
        self._driver.get('https://iss-sim.spacex.com/')

        WebDriverWait(self._driver, 30) \
            .until(EC.element_to_be_clickable((By.ID, 'begin-button'))).click()

        WebDriverWait(self._driver, 30) \
            .until(EC.visibility_of_element_located((By.ID, 'hud-darken')))

        time.sleep(START_DELAY)

        self._x_error = self._driver.find_element_by_id('x-range') \
                .find_element_by_class_name('distance')

        self._y_error = self._driver.find_element_by_id('y-range') \
               .find_element_by_class_name('distance')

        self._z_error = self._driver.find_element_by_id('z-range') \
                .find_element_by_class_name('distance')

        self._yaw_error = self._driver.find_element_by_id('yaw') \
                .find_element_by_class_name('error')

        self._pitch_error = self._driver.find_element_by_id('pitch') \
                .find_element_by_class_name('error')

        self._roll_error = self._driver.find_element_by_id('roll') \
                .find_element_by_class_name('error')

        self._translation_status = self._driver \
                .find_element_by_id('precision-translation-status')

        self._rotation_status = self._driver \
                .find_element_by_id('precision-rotation-status')

        self._toggle_translation_precise = self._driver \
                .find_element_by_id('toggle-translation')

        self._toggle_rotation_precise = self._driver \
                .find_element_by_id('toggle-rotation')

    def __del__(self):
        self._driver.close()

    ###########################################################################
    # Translations
    ###########################################################################

    def translate_left(self):
        ActionChains(self._driver).send_keys('a').perform()

    def translate_right(self):
        ActionChains(self._driver).send_keys('d').perform()

    def translate_up(self):
        ActionChains(self._driver).send_keys('w').perform()

    def translate_down(self):
        ActionChains(self._driver).send_keys('s').perform()

    def translate_forward(self):
        ActionChains(self._driver).send_keys('e').perform()

    def translate_backward(self):
        ActionChains(self._driver).send_keys('q').perform()

    ###########################################################################
    # Rotations
    ###########################################################################

    def yaw_left(self, _):
        ActionChains(self._driver).send_keys(Keys.LEFT).perform()
        return EmptyResponse()

    def yaw_right(self, _):
        ActionChains(self._driver).send_keys(Keys.RIGHT).perform()
        return EmptyResponse()

    def pitch_up(self, _):
        ActionChains(self._driver).send_keys(Keys.UP).perform()
        return EmptyResponse()

    def pitch_down(self, _):
        ActionChains(self._driver).send_keys(Keys.DOWN).perform()
        return EmptyResponse()

    def roll_left(self, _):
        ActionChains(self._driver).send_keys('<').perform()
        return EmptyResponse()

    def roll_right(self, _):
        ActionChains(self._driver).send_keys('>').perform()
        return EmptyResponse()

    ###########################################################################
    # Measurements
    ###########################################################################

    def get_x_error(self):
        return float(self._x_error.text[:-2])

    def get_y_error(self):
        return float(self._y_error.text[:-2])

    def get_z_error(self):
        return float(self._z_error.text[:-2])

    def get_yaw_error(self):
        return np.radians(float(self._yaw_error.text[:-1]))

    def get_pitch_error(self):
        return np.radians(float(self._pitch_error.text[:-1]))

    def get_roll_error(self):
        return np.radians(float(self._roll_error.text[:-1]))

    ###########################################################################
    # Precision
    ###########################################################################

    def is_translation_precise(self):
        return 'large' not in self._translation_status.get_attribute('class')

    def toggle_translation_precise(self, _):
        self._toggle_translation_precise.click()

    def is_rotation_precise(self):
        return 'large' not in self._rotation_status.get_attribute('class')

    def toggle_rotation_precise(self, _):
        self._toggle_rotation_precise.click()

class ActionRateHolder:
    def __init__(self):
        self._rates = {}

    def handle_translate_left(self, msg):
        self._rates['translate_left'] = msg.data

    def handle_translate_right(self, msg):
        self._rates['translate_right'] = msg.data

    def handle_translate_up(self, msg):
        self._rates['translate_up'] = msg.data

    def handle_translate_down(self, msg):
        self._rates['translate_down'] = msg.data

    def handle_translate_forward(self, msg):
        self._rates['translate_forward'] = msg.data

    def handle_translate_backward(self, msg):
        self._rates['translate_backward'] = msg.data

    def is_initialized(self):
        return len(self._rates) == 6

    def get_rates(self):
        return self._rates

def perform_actions(simulator, action_rates):
    if np.random.random() < action_rates['translate_left']:
        simulator.translate_left()
    if np.random.random() < action_rates['translate_right']:
        simulator.translate_right()
    if np.random.random() < action_rates['translate_up']:
        simulator.translate_up()
    if np.random.random() < action_rates['translate_down']:
        simulator.translate_down()
    if np.random.random() < action_rates['translate_forward']:
        simulator.translate_forward()
    if np.random.random() < action_rates['translate_backward']:
        simulator.translate_backward()

if __name__ == '__main__':
    rospy.init_node('iss_simulator')
    simulator = Simulator()
    holder = ActionRateHolder()

    # Translation controls
    rospy.Subscriber('controls/translate_left_rate'    , Float64, holder.handle_translate_left)
    rospy.Subscriber('controls/translate_right_rate'   , Float64, holder.handle_translate_right)
    rospy.Subscriber('controls/translate_up_rate'      , Float64, holder.handle_translate_up)
    rospy.Subscriber('controls/translate_down_rate'    , Float64, holder.handle_translate_down)
    rospy.Subscriber('controls/translate_forward_rate' , Float64, holder.handle_translate_forward)
    rospy.Subscriber('controls/translate_backward_rate', Float64, holder.handle_translate_backward)

    # Rotation services
    rospy.Service('controls/yaw_left'  , Empty, simulator.yaw_left)
    rospy.Service('controls/yaw_right' , Empty, simulator.yaw_right)
    rospy.Service('controls/pitch_up'  , Empty, simulator.pitch_up)
    rospy.Service('controls/pitch_down', Empty, simulator.pitch_down)
    rospy.Service('controls/roll_left' , Empty, simulator.roll_left)
    rospy.Service('controls/roll_right', Empty, simulator.roll_right)

    # Measurement publishers
    x_error_pub     = rospy.Publisher('measurements/x_error'    , Float64, queue_size=1)
    y_error_pub     = rospy.Publisher('measurements/y_error'    , Float64, queue_size=1)
    z_error_pub     = rospy.Publisher('measurements/z_error'    , Float64, queue_size=1)
    yaw_error_pub   = rospy.Publisher('measurements/yaw_error'  , Float64, queue_size=1)
    pitch_error_pub = rospy.Publisher('measurements/pitch_error', Float64, queue_size=1)
    roll_error_pub  = rospy.Publisher('measurements/roll_error' , Float64, queue_size=1)

    translation_precise_pub = rospy.Publisher('controls/translation_precise',
                                              Bool, queue_size=1)

    rotation_precise_pub = rospy.Publisher('controls/rotation_precise',
                                           Bool, queue_size=1)

    rospy.Service('controls/toggle_translation_precise', Empty,
                  simulator.toggle_translation_precise)

    rospy.Service('controls/toggle_rotation_precise', Empty,
                  simulator.toggle_rotation_precise)

    rate = rospy.Rate(20)
    while not rospy.is_shutdown():
        x_error_pub.publish(simulator.get_x_error())
        y_error_pub.publish(simulator.get_y_error())
        z_error_pub.publish(simulator.get_z_error())
        yaw_error_pub.publish(simulator.get_yaw_error())
        pitch_error_pub.publish(simulator.get_pitch_error())
        roll_error_pub.publish(simulator.get_roll_error())

        translation_precise_pub.publish(simulator.is_translation_precise())
        rotation_precise_pub.publish(simulator.is_rotation_precise())

        if holder.is_initialized():
            perform_actions(simulator, holder.get_rates())

        rate.sleep()
