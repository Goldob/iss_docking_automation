#!/usr/bin/env python

import rospy
import tf_conversions

from std_msgs.msg import Float64
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from iss_docking_automation import ErrorBuffer
from scipy.interpolate import interp1d


def generate_trajectory(error,
                        maneuver_time,
                        target_velocity,
                        stabilization_distance):

    t0 = 0
    t1 = 1e-9
    t2 = maneuver_time - stabilization_distance / target_velocity
    t3 = 2./3 * t2 + 1./3 * maneuver_time
    t4 = 1./3 * t2 + 2./3 * maneuver_time
    t5 = maneuver_time

    t = [t0, t1, t2, t3, t4, t5]

    ############################################################################
    # Translation
    ############################################################################

    x0 = x1 = error['x']
    x2 = stabilization_distance
    x3 = 2./3 * stabilization_distance
    x4 = 1./3 * stabilization_distance
    x5 = 0

    x = [x0, x1, x2, x3, x4, x5]
    f_x = interp1d(t, x, kind='cubic')

    y0 = y1 = error['y']
    y2 = y3 = y4 = y5 = 0

    y = [y0, y1, y2, y3, y4, y5]
    f_y = interp1d(t, y, kind='cubic')

    z0 = z1 = error['z']
    z2 = z3 = z4 = z5 = 0

    z = [z0, z1, z2, z3, z4, z5]
    f_z = interp1d(t, z, kind='cubic')

    ############################################################################
    # Rotation
    ############################################################################

    yaw0 = yaw1 = error['yaw']
    yaw2 = yaw3 = yaw4 = yaw5 = 0

    yaw = [yaw0, yaw1, yaw2, yaw3, yaw4, yaw5]
    f_yaw = interp1d(t, yaw, kind='cubic')

    pitch0 = pitch1 = error['pitch']
    pitch2 = pitch3 = pitch4 = pitch5 = 0

    pitch = [pitch0, pitch1, pitch2, pitch3, pitch4, pitch5]
    f_pitch = interp1d(t, pitch, kind='cubic')

    roll0 = roll1 = error['roll']
    roll2 = roll3 = roll4 = roll5 = 0

    roll = [roll0, roll1, roll2, roll3, roll4, roll5]
    f_roll = interp1d(t, roll, kind='cubic')

    return f_x, f_y, f_z, f_yaw, f_pitch, f_roll

def generate_path_msg(maneuver_time, path_poses,
                      f_x, f_y, f_z,
                      f_yaw, f_pitch, f_roll):

    path = Path()
    path.header.stamp = rospy.Time.now()
    path.header.frame_id = 'iss'

    for t in np.linspace(0, maneuver_time, path_poses, True):
        secs = int(t)
        nsecs = int(1e9 * (t - secs))
        duration = rospy.Duration(secs, nsecs)

        pose = PoseStamped()

        pose.header.stamp = initialization_time + duration
        pose.header.frame_id = 'iss'

        pose.pose.position.x = f_x(t)
        pose.pose.position.y = f_y(t)
        pose.pose.position.z = f_z(t)

        q = tf_conversions.transformations \
            .quaternion_from_euler(f_roll(t),
                                   f_pitch(t),
                                   f_yaw(t))

        pose.pose.orientation.x = q[0]
        pose.pose.orientation.y = q[1]
        pose.pose.orientation.z = q[2]
        pose.pose.orientation.w = q[3]

        path.poses.append(pose)

    return path

def error_to_df(error):
    return pd.DataFrame(data=[error])

def plot_results(maneuver_time, path_poses, history,
                 f_x, f_y, f_z,
                 f_yaw, f_pitch, f_roll):

    t = np.linspace(0, maneuver_time, path_poses, True)

    plt.figure(figsize=(15, 8))

    plt.subplot(231)
    plt.title('x')
    plt.plot(t, f_x(t))
    plt.plot(history['t'], history['x'])
    plt.legend(['target', 'actual'])

    plt.subplot(232)
    plt.title('y')
    plt.plot(t, f_y(t))
    plt.plot(history['t'], history['y'])
    plt.legend(['target', 'actual'])

    plt.subplot(233)
    plt.title('z')
    plt.plot(t, f_z(t))
    plt.plot(history['t'], history['z'])
    plt.legend(['target', 'actual'])

    plt.subplot(234)
    plt.title('yaw')
    plt.plot(t, f_yaw(t))
    plt.plot(history['t'], history['yaw'])
    plt.legend(['target', 'actual'])

    plt.subplot(235)
    plt.title('pitch')
    plt.plot(t, f_pitch(t))
    plt.plot(history['t'], history['pitch'])
    plt.legend(['target', 'actual'])

    plt.subplot(236)
    plt.title('roll')
    plt.plot(t, f_roll(t))
    plt.plot(history['t'], history['roll'])
    plt.legend(['target', 'actual'])

    plt.show()


if __name__ == '__main__':
    rospy.init_node('trajectory_planner')
    error_buffer = ErrorBuffer()

    maneuver_time = rospy.get_param('~maneuver_time')
    target_velocity = rospy.get_param('~target_velocity')
    stabilization_distance = rospy.get_param('~stabilization_distance')
    path_poses = rospy.get_param('~path_poses', 100)

    # Initial measurement subscribers

    rospy.Subscriber('measurements/x_error', Float64,
                     error_buffer.handle_x_error)

    rospy.Subscriber('measurements/y_error', Float64,
                     error_buffer.handle_y_error)

    rospy.Subscriber('measurements/z_error', Float64,
                     error_buffer.handle_z_error)

    rospy.Subscriber('measurements/yaw_error', Float64,
                     error_buffer.handle_yaw_error)

    rospy.Subscriber('measurements/pitch_error', Float64,
                     error_buffer.handle_pitch_error)

    rospy.Subscriber('measurements/roll_error', Float64,
                     error_buffer.handle_roll_error)

    # Target trajectory publishers

    target_x_pub = rospy.Publisher('trajectory/target_x', Float64, queue_size=1)
    target_y_pub = rospy.Publisher('trajectory/target_y', Float64, queue_size=1)
    target_z_pub = rospy.Publisher('trajectory/target_z', Float64, queue_size=1)

    target_yaw_pub = rospy.Publisher('trajectory/target_yaw',
                                     Float64, queue_size=1)

    target_pitch_pub = rospy.Publisher('trajectory/target_pitch',
                                       Float64, queue_size=1)

    target_roll_pub = rospy.Publisher('trajectory/target_roll',
                                      Float64, queue_size=1)

    path_pub = rospy.Publisher('trajectory/path', Path,
                               latch= True, queue_size=1)

    rate = rospy.Rate(20)
    trajectory_initialized = False
    while not rospy.is_shutdown():

        if error_buffer.is_initialized():
            error = error_buffer.get_error()
            error = dict(error)

            if not trajectory_initialized:

                error['t'] = None
                history = pd.DataFrame(columns=error.keys())

                f_x, f_y, f_z, f_yaw, f_pitch, f_roll \
                    = generate_trajectory(error,
                                          maneuver_time,
                                          target_velocity,
                                          stabilization_distance)

                initialization_time = rospy.Time.now()
                trajectory_initialized = True

                path = generate_path_msg(maneuver_time, path_poses,
                                         f_x, f_y, f_z,
                                         f_yaw, f_pitch, f_roll)

                path_pub.publish(path)

            duration = rospy.Time.now() - initialization_time
            time = duration.secs + 1e-9*duration.nsecs

            error['t'] = time
            history = pd.concat([history, error_to_df(error)], ignore_index=True)

            if time > maneuver_time:
                plot_results(maneuver_time, path_poses, history,
                             f_x, f_y, f_z,
                             f_yaw, f_pitch, f_roll)

                break

            target_x_pub.publish(f_x(time))
            target_y_pub.publish(f_y(time))
            target_z_pub.publish(f_z(time))

            target_yaw_pub.publish(f_yaw(time))
            target_pitch_pub.publish(f_pitch(time))
            target_roll_pub.publish(f_roll(time))

        rate.sleep()
