#!/usr/bin/env python

import rospy
import tf_conversions

from std_msgs.msg import Float64
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from iss_docking_automation import StateBuffer, ParametricTrajectory

UPDATE_RATE = 10

def generate_trajectory(error, a, v_dock, r_dock):

    t_2 = np.sqrt(v_dock**2 / (2*a**2) + (error['x'] - r_dock) / a)
    t_3 = 2 * t_2 - v_dock / a
    t_1 = 0.5 * t_3
    t_4 = t_3 + r_dock  / v_dock

    ############################################################################
    # Translation trajectory
    ############################################################################

    a_x = - a
    a_y = - error['y'] / t_1**2
    a_z = - error['z'] / t_1**2

    traj_x = ParametricTrajectory(error['x'], a_x, t_2, t_3)
    traj_y = ParametricTrajectory(error['y'], a_y, t_1, t_3)
    traj_z = ParametricTrajectory(error['z'], a_z, t_1, t_3)

    ############################################################################
    # Rotation trajectory
    ############################################################################

    eps_yaw   = - error['yaw']   / t_1**2
    eps_pitch = - error['pitch'] / t_1**2
    eps_roll  = - error['roll']  / t_1**2

    traj_yaw   = ParametricTrajectory(error['yaw']  , eps_yaw  , t_1, t_3)
    traj_pitch = ParametricTrajectory(error['pitch'], eps_pitch, t_1, t_3)
    traj_roll  = ParametricTrajectory(error['roll'] , eps_roll , t_1, t_3)

    return t_4, traj_x, traj_y, traj_z, traj_yaw, traj_pitch, traj_roll

def generate_path_msg(maneuver_time, path_poses,
                      f_x, f_y, f_z,
                      f_yaw, f_pitch, f_roll):

    path = Path()
    path.header.stamp = rospy.Time.now()
    path.header.frame_id = 'iss'

    for t in np.linspace(0, maneuver_time, path_poses, True):
        secs = int(t)
        nsecs = int(1e9 * (t - secs))
        duration = rospy.Duration(secs, nsecs)

        pose = PoseStamped()

        pose.header.stamp = initialization_time + duration
        pose.header.frame_id = 'iss'

        pose.pose.position.x = f_x(t)
        pose.pose.position.y = f_y(t)
        pose.pose.position.z = f_z(t)

        q = tf_conversions.transformations \
            .quaternion_from_euler(f_roll(t),
                                   f_pitch(t),
                                   f_yaw(t))

        pose.pose.orientation.x = q[0]
        pose.pose.orientation.y = q[1]
        pose.pose.orientation.z = q[2]
        pose.pose.orientation.w = q[3]

        path.poses.append(pose)

    return path

def error_to_df(error):
    return pd.DataFrame(data=[error])

def plot_results(maneuver_time, path_poses, history,
                 f_x, f_y, f_z,
                 f_yaw, f_pitch, f_roll):

    t = np.linspace(0, maneuver_time, path_poses, True)

    x = [f_x(ti) for ti in t]
    y = [f_y(ti) for ti in t]
    z = [f_z(ti) for ti in t]

    yaw = [f_yaw(ti) for ti in t]
    pitch = [f_pitch(ti) for ti in t]
    roll = [f_roll(ti) for ti in t]

    plt.figure(figsize=(15, 8))

    plt.subplot(231)
    plt.title('x')
    plt.plot(t, x)
    plt.plot(history['t'], history['x'])
    plt.legend(['target', 'actual'])

    plt.subplot(232)
    plt.title('y')
    plt.plot(t, y)
    plt.plot(history['t'], history['y'])
    plt.legend(['target', 'actual'])

    plt.subplot(233)
    plt.title('z')
    plt.plot(t, z)
    plt.plot(history['t'], history['z'])
    plt.legend(['target', 'actual'])

    plt.subplot(234)
    plt.title('yaw')
    plt.plot(t, yaw)
    plt.plot(history['t'], history['yaw'])
    plt.legend(['target', 'actual'])

    plt.subplot(235)
    plt.title('pitch')
    plt.plot(t, pitch)
    plt.plot(history['t'], history['pitch'])
    plt.legend(['target', 'actual'])

    plt.subplot(236)
    plt.title('roll')
    plt.plot(t, roll)
    plt.plot(history['t'], history['roll'])
    plt.legend(['target', 'actual'])

    plt.show()


if __name__ == '__main__':
    rospy.init_node('trajectory_planner')
    error_buffer = StateBuffer()

    acceleration = rospy.get_param('~acceleration')
    docking_velocity = rospy.get_param('~docking_velocity')
    docking_distance = rospy.get_param('~docking_distance')
    path_poses = rospy.get_param('~path_poses', 100)

    path_pub = rospy.Publisher('trajectory/path', Path, queue_size=1)

    ############################################################################
    # State subscribers: translation
    ############################################################################

    rospy.Subscriber('state/pos/x', Float64, error_buffer.handle_x)
    rospy.Subscriber('state/pos/y', Float64, error_buffer.handle_y)
    rospy.Subscriber('state/pos/z', Float64, error_buffer.handle_z)

    ############################################################################
    # State subscribers: rotation
    ############################################################################

    rospy.Subscriber('state/pos/yaw'  , Float64, error_buffer.handle_yaw)
    rospy.Subscriber('state/pos/pitch', Float64, error_buffer.handle_pitch)
    rospy.Subscriber('state/pos/roll' , Float64, error_buffer.handle_roll)

    ############################################################################
    # Trajectory publishers: translation
    ############################################################################

    pos_x_pub = rospy.Publisher('trajectory/pos/x', Float64, queue_size=1)
    pos_y_pub = rospy.Publisher('trajectory/pos/y', Float64, queue_size=1)
    pos_z_pub = rospy.Publisher('trajectory/pos/z', Float64, queue_size=1)

    vel_x_pub = rospy.Publisher('trajectory/vel/x', Float64, queue_size=1)
    vel_y_pub = rospy.Publisher('trajectory/vel/y', Float64, queue_size=1)
    vel_z_pub = rospy.Publisher('trajectory/vel/z', Float64, queue_size=1)

    acc_x_pub = rospy.Publisher('trajectory/acc/x', Float64, queue_size=1)
    acc_y_pub = rospy.Publisher('trajectory/acc/y', Float64, queue_size=1)
    acc_z_pub = rospy.Publisher('trajectory/acc/z', Float64, queue_size=1)

    ############################################################################
    # Trajectory publishers: rotation
    ############################################################################

    pos_yaw_pub   = rospy.Publisher('trajectory/pos/yaw'  , Float64, queue_size=1)
    pos_pitch_pub = rospy.Publisher('trajectory/pos/pitch', Float64, queue_size=1)
    pos_roll_pub  = rospy.Publisher('trajectory/pos/roll' , Float64, queue_size=1)

    vel_yaw_pub   = rospy.Publisher('trajectory/vel/yaw'  , Float64, queue_size=1)
    vel_pitch_pub = rospy.Publisher('trajectory/vel/pitch', Float64, queue_size=1)
    vel_roll_pub  = rospy.Publisher('trajectory/vel/roll' , Float64, queue_size=1)

    acc_yaw_pub   = rospy.Publisher('trajectory/acc/yaw'  , Float64, queue_size=1)
    acc_pitch_pub = rospy.Publisher('trajectory/acc/pitch', Float64, queue_size=1)
    acc_roll_pub  = rospy.Publisher('trajectory/acc/roll' , Float64, queue_size=1)

    rate = rospy.Rate(UPDATE_RATE)
    trajectory_initialized = False
    while not rospy.is_shutdown():

        if error_buffer.is_initialized():
            error = error_buffer.get_state()
            error = dict(error)

            if not trajectory_initialized:

                error['t'] = None
                history = pd.DataFrame(columns=error.keys())

                maneuver_time, \
                traj_x, traj_y, traj_z, \
                traj_yaw, traj_pitch, traj_roll \
                    = generate_trajectory(error,
                                          acceleration,
                                          docking_velocity,
                                          docking_distance)

                initialization_time = rospy.Time.now()
                trajectory_initialized = True

                path = generate_path_msg(maneuver_time, path_poses,
                                         traj_x.pos, traj_y.pos, traj_z.pos,
                                         traj_yaw.pos, traj_pitch.pos, traj_roll.pos)

                path_pub.publish(path)

            duration = rospy.Time.now() - initialization_time
            time = duration.secs + 1e-9*duration.nsecs

            error['t'] = time
            history = pd.concat([history, error_to_df(error)], ignore_index=True)

            if time > maneuver_time:
                plot_results(maneuver_time, path_poses, history,
                             traj_x.pos, traj_y.pos, traj_z.pos,
                             traj_yaw.pos, traj_pitch.pos, traj_roll.pos)

                break

            # Trajectory: translation

            pos_x_pub.publish(traj_x.pos(time))
            pos_y_pub.publish(traj_y.pos(time))
            pos_z_pub.publish(traj_z.pos(time))

            vel_x_pub.publish(traj_x.vel(time))
            vel_y_pub.publish(traj_y.vel(time))
            vel_z_pub.publish(traj_z.vel(time))

            acc_x_pub.publish(traj_x.acc(time))
            acc_y_pub.publish(traj_y.acc(time))
            acc_z_pub.publish(traj_z.acc(time))

            # Trajectory: rotation

            pos_yaw_pub  .publish(traj_yaw  .pos(time))
            pos_pitch_pub.publish(traj_pitch.pos(time))
            pos_roll_pub .publish(traj_roll .pos(time))

            vel_yaw_pub  .publish(traj_yaw  .vel(time))
            vel_pitch_pub.publish(traj_pitch.vel(time))
            vel_roll_pub .publish(traj_roll .vel(time))

            acc_yaw_pub  .publish(traj_yaw  .acc(time))
            acc_pitch_pub.publish(traj_pitch.acc(time))
            acc_roll_pub .publish(traj_roll .acc(time))


        rate.sleep()
