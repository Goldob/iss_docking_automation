#!/usr/bin/env python

import rospy
import tf2_ros
import tf_conversions

import numpy as np

from geometry_msgs.msg import TransformStamped
from std_msgs.msg import Float64
from iss_docking_automation import StateBuffer

UPDATE_RATE = 60

if __name__ == '__main__':
    rospy.init_node('error_to_tf')
    buffer = StateBuffer()

    rospy.Subscriber('state/pos/x', Float64, buffer.handle_x)
    rospy.Subscriber('state/pos/y', Float64, buffer.handle_y)
    rospy.Subscriber('state/pos/z', Float64, buffer.handle_z)

    rospy.Subscriber('state/pos/yaw'  , Float64, buffer.handle_yaw)
    rospy.Subscriber('state/pos/pitch', Float64, buffer.handle_pitch)
    rospy.Subscriber('state/pos/roll' , Float64, buffer.handle_roll)

    rate = rospy.Rate(UPDATE_RATE)
    while not rospy.is_shutdown():

        if buffer.is_initialized():

            error = buffer.get_state()
            t = TransformStamped()

            t.header.stamp = rospy.Time.now()
            t.header.frame_id = 'iss'
            t.child_frame_id = 'base_link'

            t.transform.translation.x = error['x']
            t.transform.translation.y = error['y']
            t.transform.translation.z = error['z']

            q = tf_conversions.transformations \
                    .quaternion_from_euler(np.radians(error['roll']),
                                           np.radians(error['pitch']),
                                           np.radians(error['yaw']))

            t.transform.rotation.x = q[0]
            t.transform.rotation.y = q[1]
            t.transform.rotation.z = q[2]
            t.transform.rotation.w = q[3]

            tf2_ros.TransformBroadcaster().sendTransform(t)

        rate.sleep()
